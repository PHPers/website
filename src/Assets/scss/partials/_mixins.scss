// center vertically and/or horizontally an absolute positioned element

@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}

// antialiasing mode font rendering

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius / $rem-base + rem;
  -moz-border-radius: $radius / $rem-base + rem;
  -ms-border-radius: $radius / $rem-base + rem;
  -o-border-radius: $radius / $rem-base + rem;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius / $rem-base + rem;
  border-radius: $radius;
}

@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin desaturate() {
  @include filter(grayscale(100%));
  filter: url(../../images/desaturate.svg#greyscale);
}

@mixin saturate() {
  @include filter(none);
}

@mixin font-size-rwd($size) {
  font-size: $size;
  @media #{$medium-only} {
    font-size: $size * $rwd-factor-medium;
  }
  @media #{$small-only} {
    font-size: max($size * $rwd-factor-small, 1rem);
  }
}

@mixin line-height-rwd($size) {
  line-height: $size;
  @if not unitless($size) {
    @media #{$medium-only} {
      line-height: $size * $rwd-factor-medium;
    }
    @media #{$small-only} {
      line-height: max($size * $rwd-factor-small, 1rem);
    }
  }
}

//Sass mixin for vendor-prefixed transitions
//Jul 16
//http://log.vieron.net/articles/sass-mixins-for-vendor-prefixed-transitions-including-properties/
//@function prefix($property, $prefixes: (webkit moz o ms)) {
//  $vendor-prefixed-properties: transform background-clip background-size;
//  $result: ();
//  @each $prefix in $prefixes {
//    @if index($vendor-prefixed-properties, $property) {
//      $property: -#{$prefix}-#{$property}
//    }
//    $result: append($result, $property);
//  }
//  @return $result;
//}
//
//@function trans-prefix($transition, $prefix: moz) {
//  $prefixed: ();
//  @each $trans in $transition {
//    $prop-name: nth($trans, 1);
//    $vendor-prop-name: prefix($prop-name, $prefix);
//    $prop-vals: nth($trans, 2);
//    $prefixed: append($prefixed, ($vendor-prop-name $prop-vals), comma);
//  }
//
//  @return $prefixed;
//}
//
//
//@mixin transition($values...) {
//  $transitions: ();
//  @each $declaration in $values {
//    $prop: nth($declaration, 1);
//    $prop-opts: ();
//    $length: length($declaration);
//    @for $i from 2 through $length {
//      $prop-opts: append($prop-opts, nth($declaration, $i));
//    }
//    $trans: ($prop, $prop-opts);
//    $transitions: append($transitions, $trans, comma);
//  }
//
//  -webkit-transition: trans-prefix($transitions, webkit);
//  -moz-transition: trans-prefix($transitions, moz);
//  -o-transition: trans-prefix($transitions, o);
//  transition: $values;
//}