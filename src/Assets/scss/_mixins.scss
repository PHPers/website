// center vertically and/or horizontally an absolute positioned element

@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    transform: translateX(-50%) translateY(-50%);
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    transform: translateX(-50%);
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    transform: translateY(-50%);
  }
}

// antialiasing mode font rendering

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin desaturate() {
  filter: grayscale(100%);
  filter: url(../../images/desaturate.svg#greyscale);
}

@mixin saturate() {
  filter: none;
}

@mixin font-size-rwd($size) {
  font-size: $size;
  @media #{$medium-only} {
    font-size: $size * $rwd-factor-medium;
  }
  @media #{$small-only} {
    font-size: max($size * $rwd-factor-small, 1rem);
  }
}

@mixin line-height-rwd($size) {
  line-height: $size;
  @if not unitless($size) {
    @media #{$medium-only} {
      line-height: $size * $rwd-factor-medium;
    }
    @media #{$small-only} {
      line-height: max($size * $rwd-factor-small, 1rem);
    }
  }
}
